/*!
 * Draggabilly PACKAGED v2.3.0
 * Make that shiz draggable
 * https://draggabilly.desandro.com
 * MIT license
 */ (function(e, i) {
    if (typeof define == "function" && define.amd) define("jquery-bridget/jquery-bridget", [
        "jquery"
    ], function(t) {
        return i(e, t);
    });
    else if (typeof module == "object" && module.exports) module.exports = i(e, require("jquery"));
    else e.jQueryBridget = i(e, e.jQuery);
})(window, function t(e, r) {
    "use strict";
    var s = Array.prototype.slice;
    var i1 = e.console;
    var f = typeof i1 == "undefined" ? function() {
    } : function(t1) {
        i1.error(t1);
    };
    function n1(h, o, d) {
        d = d || r || e.jQuery;
        if (!d) return;
        if (!o.prototype.option) o.prototype.option = function(t1) {
            if (!d.isPlainObject(t1)) return;
            this.options = d.extend(true, this.options, t1);
        };
        d.fn[h] = function(t1) {
            if (typeof t1 == "string") {
                var e1 = s.call(arguments, 1);
                return i2(this, t1, e1);
            }
            n2(this, t1);
            return this;
        };
        function i2(t1, r1, s1) {
            var a;
            var u = "$()." + h + '("' + r1 + '")';
            t1.each(function(t2, e2) {
                var i3 = d.data(e2, h);
                if (!i3) {
                    f(h + " not initialized. Cannot call methods, i.e. " + u);
                    return;
                }
                var n2 = i3[r1];
                if (!n2 || r1.charAt(0) == "_") {
                    f(u + " is not a valid method");
                    return;
                }
                var o1 = n2.apply(i3, s1);
                a = a === undefined ? o1 : a;
            });
            return a !== undefined ? a : t1;
        }
        function n2(t1, n3) {
            t1.each(function(t2, e2) {
                var i3 = d.data(e2, h);
                if (i3) {
                    i3.option(n3);
                    i3._init();
                } else {
                    i3 = new o(e2, n3);
                    d.data(e2, h, i3);
                }
            });
        }
        a(d);
    }
    function a(t1) {
        if (!t1 || t1 && t1.bridget) return;
        t1.bridget = n1;
    }
    a(r || e.jQuery);
    return n1;
});
/*!
 * getSize v2.0.2
 * measure size of elements
 * MIT license
 */ (function(t1, e2) {
    if (typeof define == "function" && define.amd) define("get-size/get-size", [], function() {
        return e2();
    });
    else if (typeof module == "object" && module.exports) module.exports = e2();
    else t1.getSize = e2();
})(window, function t1() {
    "use strict";
    function m(t2) {
        var e2 = parseFloat(t2);
        var i = t2.indexOf("%") == -1 && !isNaN(e2);
        return i && e2;
    }
    function e2() {
    }
    var i = typeof console == "undefined" ? e2 : function(t2) {
        console.error(t2);
    };
    var y = [
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom",
        "marginLeft",
        "marginRight",
        "marginTop",
        "marginBottom",
        "borderLeftWidth",
        "borderRightWidth",
        "borderTopWidth",
        "borderBottomWidth"
    ];
    var b = y.length;
    function E() {
        var t2 = {
            width: 0,
            height: 0,
            innerWidth: 0,
            innerHeight: 0,
            outerWidth: 0,
            outerHeight: 0
        };
        for(var e3 = 0; e3 < b; e3++){
            var i1 = y[e3];
            t2[i1] = 0;
        }
        return t2;
    }
    function _(t2) {
        var e3 = getComputedStyle(t2);
        if (!e3) i("Style returned " + e3 + ". Are you running this code in a hidden iframe on Firefox? " + "See http://bit.ly/getsizebug1");
        return e3;
    }
    var n = false;
    var x;
    function P() {
        if (n) return;
        n = true;
        var t2 = document.createElement("div");
        t2.style.width = "200px";
        t2.style.padding = "1px 2px 3px 4px";
        t2.style.borderStyle = "solid";
        t2.style.borderWidth = "1px 2px 3px 4px";
        t2.style.boxSizing = "border-box";
        var e3 = document.body || document.documentElement;
        e3.appendChild(t2);
        var i2 = _(t2);
        o.isBoxSizeOuter = x = m(i2.width) == 200;
        e3.removeChild(t2);
    }
    function o(t2) {
        P();
        if (typeof t2 == "string") t2 = document.querySelector(t2);
        if (!t2 || typeof t2 != "object" || !t2.nodeType) return;
        var e3 = _(t2);
        if (e3.display == "none") return E();
        var i2 = {
        };
        i2.width = t2.offsetWidth;
        i2.height = t2.offsetHeight;
        var n1 = i2.isBorderBox = e3.boxSizing == "border-box";
        for(var o1 = 0; o1 < b; o1++){
            var r = y[o1];
            var s = e3[r];
            var a = parseFloat(s);
            i2[r] = !isNaN(a) ? a : 0;
        }
        var u = i2.paddingLeft + i2.paddingRight;
        var h = i2.paddingTop + i2.paddingBottom;
        var d = i2.marginLeft + i2.marginRight;
        var f = i2.marginTop + i2.marginBottom;
        var p = i2.borderLeftWidth + i2.borderRightWidth;
        var c = i2.borderTopWidth + i2.borderBottomWidth;
        var v = n1 && x;
        var l = m(e3.width);
        if (l !== false) i2.width = l + (v ? 0 : u + p);
        var g = m(e3.height);
        if (g !== false) i2.height = g + (v ? 0 : h + c);
        i2.innerWidth = i2.width - (u + p);
        i2.innerHeight = i2.height - (h + c);
        i2.outerWidth = i2.width + d;
        i2.outerHeight = i2.height + f;
        return i2;
    }
    return o;
});
(function(t2, e2) {
    if (typeof define == "function" && define.amd) define("ev-emitter/ev-emitter", e2);
    else if (typeof module == "object" && module.exports) module.exports = e2();
    else t2.EvEmitter = e2();
})(typeof window != "undefined" ? window : this, function() {
    function t2() {
    }
    var e2 = t2.prototype;
    e2.on = function(t3, e3) {
        if (!t3 || !e3) return;
        var i2 = this._events = this._events || {
        };
        var n = i2[t3] = i2[t3] || [];
        if (n.indexOf(e3) == -1) n.push(e3);
        return this;
    };
    e2.once = function(t3, e3) {
        if (!t3 || !e3) return;
        this.on(t3, e3);
        var i2 = this._onceEvents = this._onceEvents || {
        };
        var n = i2[t3] = i2[t3] || {
        };
        n[e3] = true;
        return this;
    };
    e2.off = function(t3, e3) {
        var i2 = this._events && this._events[t3];
        if (!i2 || !i2.length) return;
        var n = i2.indexOf(e3);
        if (n != -1) i2.splice(n, 1);
        return this;
    };
    e2.emitEvent = function(t3, e3) {
        var i2 = this._events && this._events[t3];
        if (!i2 || !i2.length) return;
        i2 = i2.slice(0);
        e3 = e3 || [];
        var n = this._onceEvents && this._onceEvents[t3];
        for(var o = 0; o < i2.length; o++){
            var r = i2[o];
            var s = n && n[r];
            if (s) {
                this.off(t3, r);
                delete n[r];
            }
            r.apply(this, e3);
        }
        return this;
    };
    e2.allOff = function() {
        delete this._events;
        delete this._onceEvents;
    };
    return t2;
});
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */ (function(e2, i2) {
    if (typeof define == "function" && define.amd) define("unipointer/unipointer", [
        "ev-emitter/ev-emitter"
    ], function(t2) {
        return i2(e2, t2);
    });
    else if (typeof module == "object" && module.exports) module.exports = i2(e2, require("ev-emitter"));
    else e2.Unipointer = i2(e2, e2.EvEmitter);
})(window, function t2(o, e2) {
    function i2() {
    }
    function n() {
    }
    var r = n.prototype = Object.create(e2.prototype);
    r.bindStartEvent = function(t3) {
        this._bindStartEvent(t3, true);
    };
    r.unbindStartEvent = function(t3) {
        this._bindStartEvent(t3, false);
    };
    r._bindStartEvent = function(t3, e3) {
        e3 = e3 === undefined ? true : e3;
        var i3 = e3 ? "addEventListener" : "removeEventListener";
        var n1 = "mousedown";
        if (o.PointerEvent) n1 = "pointerdown";
        else if ("ontouchstart" in o) n1 = "touchstart";
        t3[i3](n1, this);
    };
    r.handleEvent = function(t3) {
        var e3 = "on" + t3.type;
        if (this[e3]) this[e3](t3);
    };
    r.getTouch = function(t3) {
        for(var e3 = 0; e3 < t3.length; e3++){
            var i3 = t3[e3];
            if (i3.identifier == this.pointerIdentifier) return i3;
        }
    };
    r.onmousedown = function(t3) {
        var e3 = t3.button;
        if (e3 && e3 !== 0 && e3 !== 1) return;
        this._pointerDown(t3, t3);
    };
    r.ontouchstart = function(t3) {
        this._pointerDown(t3, t3.changedTouches[0]);
    };
    r.onpointerdown = function(t3) {
        this._pointerDown(t3, t3);
    };
    r._pointerDown = function(t3, e3) {
        if (t3.button || this.isPointerDown) return;
        this.isPointerDown = true;
        this.pointerIdentifier = e3.pointerId !== undefined ? e3.pointerId : e3.identifier;
        this.pointerDown(t3, e3);
    };
    r.pointerDown = function(t3, e3) {
        this._bindPostStartEvents(t3);
        this.emitEvent("pointerDown", [
            t3,
            e3
        ]);
    };
    var s = {
        mousedown: [
            "mousemove",
            "mouseup"
        ],
        touchstart: [
            "touchmove",
            "touchend",
            "touchcancel"
        ],
        pointerdown: [
            "pointermove",
            "pointerup",
            "pointercancel"
        ]
    };
    r._bindPostStartEvents = function(t3) {
        if (!t3) return;
        var e3 = s[t3.type];
        e3.forEach(function(t4) {
            o.addEventListener(t4, this);
        }, this);
        this._boundPointerEvents = e3;
    };
    r._unbindPostStartEvents = function() {
        if (!this._boundPointerEvents) return;
        this._boundPointerEvents.forEach(function(t3) {
            o.removeEventListener(t3, this);
        }, this);
        delete this._boundPointerEvents;
    };
    r.onmousemove = function(t3) {
        this._pointerMove(t3, t3);
    };
    r.onpointermove = function(t3) {
        if (t3.pointerId == this.pointerIdentifier) this._pointerMove(t3, t3);
    };
    r.ontouchmove = function(t3) {
        var e3 = this.getTouch(t3.changedTouches);
        if (e3) this._pointerMove(t3, e3);
    };
    r._pointerMove = function(t3, e3) {
        this.pointerMove(t3, e3);
    };
    r.pointerMove = function(t3, e3) {
        this.emitEvent("pointerMove", [
            t3,
            e3
        ]);
    };
    r.onmouseup = function(t3) {
        this._pointerUp(t3, t3);
    };
    r.onpointerup = function(t3) {
        if (t3.pointerId == this.pointerIdentifier) this._pointerUp(t3, t3);
    };
    r.ontouchend = function(t3) {
        var e3 = this.getTouch(t3.changedTouches);
        if (e3) this._pointerUp(t3, e3);
    };
    r._pointerUp = function(t3, e3) {
        this._pointerDone();
        this.pointerUp(t3, e3);
    };
    r.pointerUp = function(t3, e3) {
        this.emitEvent("pointerUp", [
            t3,
            e3
        ]);
    };
    r._pointerDone = function() {
        this._pointerReset();
        this._unbindPostStartEvents();
        this.pointerDone();
    };
    r._pointerReset = function() {
        this.isPointerDown = false;
        delete this.pointerIdentifier;
    };
    r.pointerDone = i2;
    r.onpointercancel = function(t3) {
        if (t3.pointerId == this.pointerIdentifier) this._pointerCancel(t3, t3);
    };
    r.ontouchcancel = function(t3) {
        var e3 = this.getTouch(t3.changedTouches);
        if (e3) this._pointerCancel(t3, e3);
    };
    r._pointerCancel = function(t3, e3) {
        this._pointerDone();
        this.pointerCancel(t3, e3);
    };
    r.pointerCancel = function(t3, e3) {
        this.emitEvent("pointerCancel", [
            t3,
            e3
        ]);
    };
    n.getPointerPoint = function(t3) {
        return {
            x: t3.pageX,
            y: t3.pageY
        };
    };
    return n;
});
/*!
 * Unidragger v2.3.0
 * Draggable base class
 * MIT license
 */ (function(e2, i2) {
    if (typeof define == "function" && define.amd) define("unidragger/unidragger", [
        "unipointer/unipointer"
    ], function(t3) {
        return i2(e2, t3);
    });
    else if (typeof module == "object" && module.exports) module.exports = i2(e2, require("unipointer"));
    else e2.Unidragger = i2(e2, e2.Unipointer);
})(window, function t3(r, e2) {
    function i2() {
    }
    var n = i2.prototype = Object.create(e2.prototype);
    n.bindHandles = function() {
        this._bindHandles(true);
    };
    n.unbindHandles = function() {
        this._bindHandles(false);
    };
    n._bindHandles = function(t4) {
        t4 = t4 === undefined ? true : t4;
        var e3 = t4 ? "addEventListener" : "removeEventListener";
        var i4 = t4 ? this._touchActionValue : "";
        for(var n1 = 0; n1 < this.handles.length; n1++){
            var o = this.handles[n1];
            this._bindStartEvent(o, t4);
            o[e3]("click", this);
            if (r.PointerEvent) o.style.touchAction = i4;
        }
    };
    n._touchActionValue = "none";
    n.pointerDown = function(t4, e3) {
        var i4 = this.okayPointerDown(t4);
        if (!i4) return;
        this.pointerDownPointer = e3;
        t4.preventDefault();
        this.pointerDownBlur();
        this._bindPostStartEvents(t4);
        this.emitEvent("pointerDown", [
            t4,
            e3
        ]);
    };
    var o = {
        TEXTAREA: true,
        INPUT: true,
        SELECT: true,
        OPTION: true
    };
    var s = {
        radio: true,
        checkbox: true,
        button: true,
        submit: true,
        image: true,
        file: true
    };
    n.okayPointerDown = function(t4) {
        var e3 = o[t4.target.nodeName];
        var i4 = s[t4.target.type];
        var n1 = !e3 || i4;
        if (!n1) this._pointerReset();
        return n1;
    };
    n.pointerDownBlur = function() {
        var t4 = document.activeElement;
        var e3 = t4 && t4.blur && t4 != document.body;
        if (e3) t4.blur();
    };
    n.pointerMove = function(t4, e3) {
        var i4 = this._dragPointerMove(t4, e3);
        this.emitEvent("pointerMove", [
            t4,
            e3,
            i4
        ]);
        this._dragMove(t4, e3, i4);
    };
    n._dragPointerMove = function(t4, e3) {
        var i4 = {
            x: e3.pageX - this.pointerDownPointer.pageX,
            y: e3.pageY - this.pointerDownPointer.pageY
        };
        if (!this.isDragging && this.hasDragStarted(i4)) this._dragStart(t4, e3);
        return i4;
    };
    n.hasDragStarted = function(t4) {
        return Math.abs(t4.x) > 3 || Math.abs(t4.y) > 3;
    };
    n.pointerUp = function(t4, e3) {
        this.emitEvent("pointerUp", [
            t4,
            e3
        ]);
        this._dragPointerUp(t4, e3);
    };
    n._dragPointerUp = function(t4, e3) {
        if (this.isDragging) this._dragEnd(t4, e3);
        else this._staticClick(t4, e3);
    };
    n._dragStart = function(t4, e3) {
        this.isDragging = true;
        this.isPreventingClicks = true;
        this.dragStart(t4, e3);
    };
    n.dragStart = function(t4, e3) {
        this.emitEvent("dragStart", [
            t4,
            e3
        ]);
    };
    n._dragMove = function(t4, e3, i4) {
        if (!this.isDragging) return;
        this.dragMove(t4, e3, i4);
    };
    n.dragMove = function(t4, e3, i4) {
        t4.preventDefault();
        this.emitEvent("dragMove", [
            t4,
            e3,
            i4
        ]);
    };
    n._dragEnd = function(t4, e3) {
        this.isDragging = false;
        setTimeout((function() {
            delete this.isPreventingClicks;
        }).bind(this));
        this.dragEnd(t4, e3);
    };
    n.dragEnd = function(t4, e3) {
        this.emitEvent("dragEnd", [
            t4,
            e3
        ]);
    };
    n.onclick = function(t4) {
        if (this.isPreventingClicks) t4.preventDefault();
    };
    n._staticClick = function(t4, e3) {
        if (this.isIgnoringMouseUp && t4.type == "mouseup") return;
        this.staticClick(t4, e3);
        if (t4.type != "mouseup") {
            this.isIgnoringMouseUp = true;
            setTimeout((function() {
                delete this.isIgnoringMouseUp;
            }).bind(this), 400);
        }
    };
    n.staticClick = function(t4, e3) {
        this.emitEvent("staticClick", [
            t4,
            e3
        ]);
    };
    i2.getPointerPoint = e2.getPointerPoint;
    return i2;
});
/*!
 * Draggabilly v2.3.0
 * Make that shiz draggable
 * https://draggabilly.desandro.com
 * MIT license
 */ (function(i2, n) {
    if (typeof define == "function" && define.amd) define([
        "get-size/get-size",
        "unidragger/unidragger"
    ], function(t4, e2) {
        return n(i2, t4, e2);
    });
    else if (typeof module == "object" && module.exports) module.exports = n(i2, require("get-size"), require("unidragger"));
    else i2.Draggabilly = n(i2, i2.getSize, i2.Unidragger);
})(window, function t4(r, u, e2) {
    function i2(t5, e3) {
        for(var i4 in e3)t5[i4] = e3[i4];
        return t5;
    }
    function n() {
    }
    var o = r.jQuery;
    function s(t5, e3) {
        this.element = typeof t5 == "string" ? document.querySelector(t5) : t5;
        if (o) this.$element = o(this.element);
        this.options = i2({
        }, this.constructor.defaults);
        this.option(e3);
        this._create();
    }
    var a = s.prototype = Object.create(e2.prototype);
    s.defaults = {
    };
    a.option = function(t5) {
        i2(this.options, t5);
    };
    var h = {
        relative: true,
        absolute: true,
        fixed: true
    };
    a._create = function() {
        this.position = {
        };
        this._getPosition();
        this.startPoint = {
            x: 0,
            y: 0
        };
        this.dragPoint = {
            x: 0,
            y: 0
        };
        this.startPosition = i2({
        }, this.position);
        var t5 = getComputedStyle(this.element);
        if (!h[t5.position]) this.element.style.position = "relative";
        this.on("pointerMove", this.onPointerMove);
        this.on("pointerUp", this.onPointerUp);
        this.enable();
        this.setHandles();
    };
    a.setHandles = function() {
        this.handles = this.options.handle ? this.element.querySelectorAll(this.options.handle) : [
            this.element
        ];
        this.bindHandles();
    };
    a.dispatchEvent = function(t5, e3, i4) {
        var n1 = [
            e3
        ].concat(i4);
        this.emitEvent(t5, n1);
        this.dispatchJQueryEvent(t5, e3, i4);
    };
    a.dispatchJQueryEvent = function(t5, e3, i4) {
        var n1 = r.jQuery;
        if (!n1 || !this.$element) return;
        var o1 = n1.Event(e3);
        o1.type = t5;
        this.$element.trigger(o1, i4);
    };
    a._getPosition = function() {
        var t5 = getComputedStyle(this.element);
        var e3 = this._getPositionCoord(t5.left, "width");
        var i4 = this._getPositionCoord(t5.top, "height");
        this.position.x = isNaN(e3) ? 0 : e3;
        this.position.y = isNaN(i4) ? 0 : i4;
        this._addTransformPosition(t5);
    };
    a._getPositionCoord = function(t5, e3) {
        if (t5.indexOf("%") != -1) {
            var i4 = u(this.element.parentNode);
            return !i4 ? 0 : parseFloat(t5) / 100 * i4[e3];
        }
        return parseInt(t5, 10);
    };
    a._addTransformPosition = function(t5) {
        var e3 = t5.transform;
        if (e3.indexOf("matrix") !== 0) return;
        var i5 = e3.split(",");
        var n1 = e3.indexOf("matrix3d") === 0 ? 12 : 4;
        var o1 = parseInt(i5[n1], 10);
        var r1 = parseInt(i5[n1 + 1], 10);
        this.position.x += o1;
        this.position.y += r1;
    };
    a.onPointerDown = function(t5, e3) {
        this.element.classList.add("is-pointer-down");
        this.dispatchJQueryEvent("pointerDown", t5, [
            e3
        ]);
    };
    a.pointerDown = function(t5, e3) {
        var i5 = this.okayPointerDown(t5);
        if (!i5 || !this.isEnabled) {
            this._pointerReset();
            return;
        }
        this.pointerDownPointer = {
            pageX: e3.pageX,
            pageY: e3.pageY
        };
        t5.preventDefault();
        this.pointerDownBlur();
        this._bindPostStartEvents(t5);
        this.element.classList.add("is-pointer-down");
        this.dispatchEvent("pointerDown", t5, [
            e3
        ]);
    };
    a.dragStart = function(t5, e3) {
        if (!this.isEnabled) return;
        this._getPosition();
        this.measureContainment();
        this.startPosition.x = this.position.x;
        this.startPosition.y = this.position.y;
        this.setLeftTop();
        this.dragPoint.x = 0;
        this.dragPoint.y = 0;
        this.element.classList.add("is-dragging");
        this.dispatchEvent("dragStart", t5, [
            e3
        ]);
        this.animate();
    };
    a.measureContainment = function() {
        var t5 = this.getContainer();
        if (!t5) return;
        var e3 = u(this.element);
        var i5 = u(t5);
        var n1 = this.element.getBoundingClientRect();
        var o1 = t5.getBoundingClientRect();
        var r1 = i5.borderLeftWidth + i5.borderRightWidth;
        var s1 = i5.borderTopWidth + i5.borderBottomWidth;
        var a1 = this.relativeStartPosition = {
            x: n1.left - (o1.left + i5.borderLeftWidth),
            y: n1.top - (o1.top + i5.borderTopWidth)
        };
        this.containSize = {
            width: i5.width - r1 - a1.x - e3.width,
            height: i5.height - s1 - a1.y - e3.height
        };
    };
    a.getContainer = function() {
        var t5 = this.options.containment;
        if (!t5) return;
        var e3 = t5 instanceof HTMLElement;
        if (e3) return t5;
        if (typeof t5 == "string") return document.querySelector(t5);
        return this.element.parentNode;
    };
    a.onPointerMove = function(t5, e3, i5) {
        this.dispatchJQueryEvent("pointerMove", t5, [
            e3,
            i5
        ]);
    };
    a.dragMove = function(t5, e3, i5) {
        if (!this.isEnabled) return;
        var n1 = i5.x;
        var o1 = i5.y;
        var r1 = this.options.grid;
        var s1 = r1 && r1[0];
        var a1 = r1 && r1[1];
        n1 = d(n1, s1);
        o1 = d(o1, a1);
        n1 = this.containDrag("x", n1, s1);
        o1 = this.containDrag("y", o1, a1);
        n1 = this.options.axis == "y" ? 0 : n1;
        o1 = this.options.axis == "x" ? 0 : o1;
        this.position.x = this.startPosition.x + n1;
        this.position.y = this.startPosition.y + o1;
        this.dragPoint.x = n1;
        this.dragPoint.y = o1;
        this.dispatchEvent("dragMove", t5, [
            e3,
            i5
        ]);
    };
    function d(t5, e3, i5) {
        i5 = i5 || "round";
        return e3 ? Math[i5](t5 / e3) * e3 : t5;
    }
    a.containDrag = function(t5, e3, i5) {
        if (!this.options.containment) return e3;
        var n1 = t5 == "x" ? "width" : "height";
        var o1 = this.relativeStartPosition[t5];
        var r1 = d(-o1, i5, "ceil");
        var s1 = this.containSize[n1];
        s1 = d(s1, i5, "floor");
        return Math.max(r1, Math.min(s1, e3));
    };
    a.onPointerUp = function(t5, e3) {
        this.element.classList.remove("is-pointer-down");
        this.dispatchJQueryEvent("pointerUp", t5, [
            e3
        ]);
    };
    a.dragEnd = function(t5, e3) {
        if (!this.isEnabled) return;
        this.element.style.transform = "";
        this.setLeftTop();
        this.element.classList.remove("is-dragging");
        this.dispatchEvent("dragEnd", t5, [
            e3
        ]);
    };
    a.animate = function() {
        if (!this.isDragging) return;
        this.positionDrag();
        var e3 = this;
        requestAnimationFrame(function t5() {
            e3.animate();
        });
    };
    a.setLeftTop = function() {
        this.element.style.left = this.position.x + "px";
        this.element.style.top = this.position.y + "px";
    };
    a.positionDrag = function() {
        this.element.style.transform = "translate3d( " + this.dragPoint.x + "px, " + this.dragPoint.y + "px, 0)";
    };
    a.staticClick = function(t5, e3) {
        this.dispatchEvent("staticClick", t5, [
            e3
        ]);
    };
    a.setPosition = function(t5, e3) {
        this.position.x = t5;
        this.position.y = e3;
        this.setLeftTop();
    };
    a.enable = function() {
        this.isEnabled = true;
    };
    a.disable = function() {
        this.isEnabled = false;
        if (this.isDragging) this.dragEnd();
    };
    a.destroy = function() {
        this.disable();
        this.element.style.transform = "";
        this.element.style.left = "";
        this.element.style.top = "";
        this.element.style.position = "";
        this.unbindHandles();
        if (this.$element) this.$element.removeData("draggabilly");
    };
    a._init = n;
    if (o && o.bridget) o.bridget("draggabilly", s);
    return s;
});
